// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package users_sql

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO USERS (username,email,encoded_password) VALUES ($1,$2,$3)
`

type CreateUserParams struct {
	Username        string `json:"username"`
	Email           string `json:"email"`
	EncodedPassword string `json:"encodedPassword"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.EncodedPassword)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, username, email, encoded_password FROM users
`

func (q *Queries) GetAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.EncodedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT username,email FROM users WHERE id = $1
`

type GetUserRow struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.Username, &i.Email)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT id,encoded_password FROM users WHERE email = $1
`

type GetUserPasswordRow struct {
	ID              int32  `json:"id"`
	EncodedPassword string `json:"encodedPassword"`
}

func (q *Queries) GetUserPassword(ctx context.Context, email string) (GetUserPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, email)
	var i GetUserPasswordRow
	err := row.Scan(&i.ID, &i.EncodedPassword)
	return i, err
}
